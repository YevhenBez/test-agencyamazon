{"version":3,"file":"static/js/953.5503317d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/accounts/css/accounts.module.css?e18c","pages/accounts/Accounts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"accountsContainer\":\"accounts_accountsContainer__6kphm\",\"accountsContainer__filterBoard\":\"accounts_accountsContainer__filterBoard__v11xm\",\"accountsContainer__filterBoard__inputBox\":\"accounts_accountsContainer__filterBoard__inputBox__aEaHd\",\"accountsContainer__filterBoard__inputBox__svg\":\"accounts_accountsContainer__filterBoard__inputBox__svg__UOzW-\",\"accountsContainer__filterBoard__inputBox__input\":\"accounts_accountsContainer__filterBoard__inputBox__input__GKoZn\",\"accountsContainer__table\":\"accounts_accountsContainer__table__Zfh6X\",\"accountsContainer__table__tr__indentBgn\":\"accounts_accountsContainer__table__tr__indentBgn__PJ3DX\",\"accountsContainer__table__tr__th\":\"accounts_accountsContainer__table__tr__th__+5k7P\",\"accountsContainer__table__tr__indentEnd\":\"accounts_accountsContainer__table__tr__indentEnd__lhq3T\",\"accountsContainer__table__tr\":\"accounts_accountsContainer__table__tr__9CY7i\",\"accountsContainer__table__td\":\"accounts_accountsContainer__table__td__YoKdd\"};","import React, { useState, useEffect, useMemo } from 'react';\nimport listAccounts from '../../path/to/accounts.json';\nimport css from './css/accounts.module.css';\nimport sprite from '../../img/svg/sprite-icon.svg';\n\nconst Accounts = () => {\n  const itemsPerPage = 8;\n\n  const [filter, setFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(\n    Math.ceil(listAccounts.length / itemsPerPage)\n  );\n\n  let maxPageNumbersToShow;\n\n  const filteredAccounts = useMemo(() => {\n    return listAccounts.filter(\n      row =>\n        row.id.toLowerCase().includes(filter.toLowerCase()) ||\n        row.email.toLowerCase().includes(filter.toLowerCase()) ||\n        row.authToken.toLowerCase().includes(filter.toLowerCase()) ||\n        row.creationDate.includes(filter)\n    );\n  }, [filter]);\n\n  // Обновление totalPages\n  useEffect(() => {\n    const newTotalPages = Math.ceil(filteredAccounts.length / itemsPerPage);\n    setTotalPages(newTotalPages);\n  }, [filter, filteredAccounts, itemsPerPage]);\n\n  // Обновление currentPage\n  useEffect(() => {\n    if (currentPage > totalPages) {\n      setCurrentPage(1);\n    }\n  }, [currentPage, itemsPerPage, filteredAccounts, totalPages]);\n\n  const displayItems = useMemo(() => {\n    return filteredAccounts.slice(\n      (currentPage - 1) * itemsPerPage,\n      currentPage * itemsPerPage\n    );\n  }, [currentPage, itemsPerPage, filteredAccounts]);\n\n  maxPageNumbersToShow = totalPages > 3 ? 4 : totalPages;\n\n  const handleClick = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  const generatePageNumbers = () => {\n    const pageNumbers = [];\n    let startPage = currentPage - 2;\n    let endPage = currentPage + 1;\n\n    if (startPage <= 0) {\n      startPage = 1;\n      endPage = startPage + maxPageNumbersToShow - 1;\n    }\n\n    if (endPage > totalPages) {\n      endPage = totalPages;\n      startPage = endPage - maxPageNumbersToShow + 1;\n    }\n\n    for (let i = startPage; i <= endPage; i++) {\n      pageNumbers.push(i);\n    }\n\n    return pageNumbers;\n  };\n\n  const handleChangeName = event => {\n    setFilter(event.currentTarget.value);\n    setCurrentPage(1);\n\n  };\n\n  return (\n    <div className={css.accountsContainer}>\n      <div className={css.accountsContainer__filterBoard}>\n        <h1>Table Accounts</h1>\n        \n        <div className={css.accountsContainer__filterBoard__inputBox}>\n          <svg\n            width=\"24\"\n            height=\"24\"\n            className={css.accountsContainer__filterBoard__inputBox__svg}\n          >\n            <use xlinkHref={`${sprite}#search`} />\n          </svg>\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={handleChangeName}\n            placeholder=\"Search\"\n            className={css.accountsContainer__filterBoard__inputBox__input}\n          />\n        </div>\n      </div>\n      <table className={css.accountsContainer__table}>\n        <thead>\n          <tr className={css.accountsContainer__table__tr}>\n            <th className={css.accountsContainer__table__tr__indentBgn}></th>\n            <th className={css.accountsContainer__table__tr__th}>\n              accountId\n            </th>\n            <th className={css.accountsContainer__table__tr__th}>email</th>\n            <th className={css.accountsContainer__table__tr__th}>\n              authToken\n            </th>\n            <th className={css.accountsContainer__table__tr__th}>creationDate</th>\n            <th className={css.accountsContainer__table__tr__indentEnd}></th>\n          </tr>\n        </thead>\n\n        {filter ? (\n          <tbody>\n            {displayItems.map(filteredAccount => (\n              <tr key={filteredAccount.id}>\n                <td></td>\n                <td className={css.accountsContainer__table__td}>\n                  {filteredAccount.id}\n                </td>\n                <td className={css.accountsContainer__table__td}>\n                  {filteredAccount.email}\n                </td>\n                <td className={css.accountsContainer__table__td}>\n                  {filteredAccount.authToken}\n                </td>\n                <td className={css.accountsContainer__table__td}>\n                  {filteredAccount.creationDate}\n                </td>\n                <td></td>\n              </tr>\n            ))}\n          </tbody>\n        ) : (\n          <tbody>\n            {displayItems.map(listAccount => (\n              <tr key={listAccount.id}>\n                <td></td>\n                <td className={css.accountsContainer__table__td}>\n                  {listAccount.id}\n                </td>\n                <td className={css.accountsContainer__table__td}>\n                  {listAccount.email}\n                </td>\n                <td className={css.accountsContainer__table__td}>\n                  {listAccount.authToken}\n                </td>\n                <td className={css.accountsContainer__table__td}>\n                  {listAccount.creationDate}\n                </td>\n                <td></td>\n              </tr>\n            ))}\n          </tbody>\n        )}\n      </table>\n      <div>\n        <button\n          onClick={() => handleClick(currentPage - 1)}\n          disabled={currentPage === 1}\n        >\n          Назад\n        </button>\n        {currentPage > 3 && totalPages > 4 && (\n          <button onClick={() => handleClick(1)}>1</button>\n        )}\n        {currentPage > 3 && totalPages > 4 && <span>...</span>}\n        {generatePageNumbers().map(pageNumber => (\n          <button\n            key={pageNumber}\n            onClick={() => handleClick(pageNumber)}\n            style={{\n              backgroundColor: pageNumber === currentPage ? 'blue' : 'grey',\n            }}\n          >\n            {pageNumber}\n          </button>\n        ))}\n\n        {currentPage < totalPages - 1 && totalPages > 4 && <span>...</span>}\n        {currentPage < totalPages - 1 && totalPages > 4 && (\n          <button onClick={() => handleClick(totalPages)}>{totalPages}</button>\n        )}\n        <button\n          onClick={() => handleClick(currentPage + 1)}\n          disabled={currentPage === totalPages}\n        >\n          Вперед\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Accounts;\n"],"names":["maxPageNumbersToShow","_useState","useState","_useState2","_slicedToArray","filter","setFilter","_useState3","_useState4","currentPage","setCurrentPage","_useState5","Math","ceil","listAccounts","_useState6","totalPages","setTotalPages","filteredAccounts","useMemo","row","id","toLowerCase","includes","email","authToken","creationDate","useEffect","newTotalPages","length","displayItems","slice","handleClick","pageNumber","_jsxs","className","css","children","_jsx","width","height","xlinkHref","concat","sprite","type","value","onChange","event","currentTarget","placeholder","map","filteredAccount","listAccount","onClick","disabled","pageNumbers","startPage","endPage","i","push","generatePageNumbers","style","backgroundColor"],"sourceRoot":""}